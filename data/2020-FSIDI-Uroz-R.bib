@article{2020-FSIDI-Uroz-R,
    title = "On Challenges in Verifying Trusted Executable Files in Memory Forensics",
    journal = "Forensic Science International: Digital Investigation",
    volume = "32",
    pages = "300917",
    year = "2020",
    issn = "2666-2817",
    doi = "https://doi.org/10.1016/j.fsidi.2020.300917",
    url = "http://www.sciencedirect.com/science/article/pii/S2666281720300123",
    author = "Daniel Uroz and Ricardo J. Rodr√≠guez",
    keywords = "Memory forensics, Authenticode, Digital Signature Verification, Code Signing, Volatility",
    abstract = "Memory forensics is a fundamental step in any security incident response process, especially in computer systems where malware may be present. Thememory of the system is acquired and then analyzed, looking for facts about the security incident. To remain stealthy and undetected in computer systems, malware are abusing the code signing technology, which helps to establish trust in computer software. Intuitively, a memory forensic analyst can think of code signing as a preliminary step to prioritize the list of processes to analyze. However, amemory dump does not contain an exact copy of an executable file (the file as stored in disk) and thus code signing may be useless in this context. In this paper, we investigate the limitations that memory forensics imposes to the digital signature verification process of Windows PE signed files obtained from a memory dump. These limitations are data incompleteness, data changes caused by relocation, catalog-signed files, and executable file and process inconsistencies. We also discuss solutions to these limitations. Moreover, we have developed a Volatility plugin named sigcheck that recovers executable files from a memory dump and computes its digital signature (if feasible).We tested it on Windows 7 x86 and x64memorydumps. Our experiments showed that the success rate is low, especiallywhen thememory is acquired from a system that has been running for a long time."
}